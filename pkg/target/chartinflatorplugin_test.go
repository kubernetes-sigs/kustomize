/*
Copyright 2019 The Kubernetes Authors.
 Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package target_test

import (
	"path/filepath"
	"testing"

	"sigs.k8s.io/kustomize/k8sdeps/kv/plugin"
)

// The curly bracket nightmare content below
// was generated by "helm create freeWifi".
//
// TODO: Replace with a call to vendored code?
//
// nolint:lll
func writeChart(th *KustTestHarness, root string) {
	th.writeF(filepath.Join(root, "Chart.yaml"), `
apiVersion: v1
appVersion: "1.0"
description: A Helm chart for Kubernetes
name: freeWifi
version: 0.1.0
`)
	th.writeF(filepath.Join(root, "values.yaml"), `
replicaCount: 1

image:
  repository: nginx
  tag: stable
  pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: chart-example.local
      paths: []
  tls: []

resources: {}
nodeSelector: {}
tolerations: []
affinity: {}
`)
	th.writeF(filepath.Join(root, "templates", "deployment.yaml"), `
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "freeWifi.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "freeWifi.name" . }}
    helm.sh/chart: {{ include "freeWifi.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "freeWifi.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "freeWifi.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
`)
	th.writeF(filepath.Join(root, "templates", "_helpers.yaml"), `
{{/* vim: set filetype=mustache: */}}
{{/*
Expand the name of the chart.
*/}}
{{- define "freeWifi.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Create a default fully qualified app name.
We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
If release name contains chart name it will be used as a full name.
*/}}
{{- define "freeWifi.fullname" -}}
{{- if .Values.fullnameOverride -}}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- $name := default .Chart.Name .Values.nameOverride -}}
{{- if contains $name .Release.Name -}}
{{- .Release.Name | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" -}}
{{- end -}}
{{- end -}}
{{- end -}}

{{/*
Create chart name and version as used by the chart label.
*/}}
{{- define "freeWifi.chart" -}}
{{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" -}}
{{- end -}}
`)
	th.writeF(filepath.Join(root, "templates", "ingress.yaml"), `
{{- if .Values.ingress.enabled -}}
{{- $fullName := include "freeWifi.fullname" . -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    app.kubernetes.io/name: {{ include "freeWifi.name" . }}
    helm.sh/chart: {{ include "freeWifi.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
{{- if .Values.ingress.tls }}
  tls:
  {{- range .Values.ingress.tls }}
    - hosts:
      {{- range .hosts }}
        - {{ . | quote }}
      {{- end }}
      secretName: {{ .secretName }}
  {{- end }}
{{- end }}
  rules:
  {{- range .Values.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
        {{- range .paths }}
          - path: {{ . }}
            backend:
              serviceName: {{ $fullName }}
              servicePort: http
        {{- end }}
  {{- end }}
{{- end }}
`)
	th.writeF(filepath.Join(root, "templates", "service.yaml"), `
apiVersion: v1
kind: Service
metadata:
  name: {{ include "freeWifi.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "freeWifi.name" . }}
    helm.sh/chart: {{ include "freeWifi.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: {{ include "freeWifi.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
`)
}

func TestChartInflatorPlugin(t *testing.T) {
	tc := NewTestEnvController(t).Set()
	//defer tc.Reset()

	tc.BuildGoPlugin(
		"kustomize.config.k8s.io", "v1", "ChartInflator")

	th := NewKustTestHarnessWithPluginConfig(
		t, "/app", plugin.ActivePluginConfig())
	th.writeK("/app", `
generators:
- chartInflator.yaml
`)

	th.writeF("/app/chartInflator.yaml", `
apiVersion: kustomize.config.k8s.io/v1
kind: ChartInflator
metadata:
  name: meh
root: freeWifi
`)
	//writeChart(th, "/app/freeWifi")
	m, err := th.makeKustTarget().MakeCustomizedResMap()
	if err != nil {
		t.Fatalf("Err: %v", err)
	}
	th.assertActualEqualsExpected(m, `
`)
}
