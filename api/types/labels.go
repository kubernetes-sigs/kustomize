// Copyright 2019 The Kubernetes Authors.
// SPDX-License-Identifier: Apache-2.0

package types

// +k8s:deepcopy-gen=true
type Label struct {
	// Pairs contains the key-value pairs for labels to add
	Pairs map[string]string `json:"pairs,omitempty" yaml:"pairs,omitempty"`
	// IncludeSelectors inidicates should transformer include the
	// fieldSpecs for selectors. Custom fieldSpecs specified by
	// FieldSpecs will be merged with builtin fieldSpecs if this
	// is true.
	IncludeSelectors bool `json:"includeSelectors,omitempty" yaml:"includeSelectors,omitempty"`
	// IncludeTemplates inidicates should transformer include the
	// spec/template/metadata fieldSpec. Custom fieldSpecs specified by
	// FieldSpecs will be merged with spec/template/metadata fieldSpec if this
	// is true. If IncludeSelectors is true, IncludeTemplates is not needed.
	IncludeTemplates bool        `json:"includeTemplates,omitempty" yaml:"includeTemplates,omitempty"`
	FieldSpecs       []FieldSpec `json:"fields,omitempty" yaml:"fields,omitempty"`
}

func labelFromCommonLabels(commonLabels map[string]string) *Label {
	if len(commonLabels) == 0 {
		return nil
	}
	return &Label{
		Pairs:            commonLabels,
		IncludeSelectors: true,
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Label) DeepCopyInto(out *Label) {
	*out = *in
	if in.Pairs != nil {
		in, out := &in.Pairs, &out.Pairs
		*out = make(map[string]string, len(*in))
		for key, val := range *in {
			(*out)[key] = val
		}
	}
	if in.FieldSpecs != nil {
		in, out := &in.FieldSpecs, &out.FieldSpecs
		*out = make([]FieldSpec, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Label.
func (in *Label) DeepCopy() *Label {
	if in == nil {
		return nil
	}
	out := new(Label)
	in.DeepCopyInto(out)
	return out
}
