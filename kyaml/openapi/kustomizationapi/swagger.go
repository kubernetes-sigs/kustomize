// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package kustomizationapi generated by go-bindata.// sources:
// kustomizationapi/swagger.json
package kustomizationapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kustomizationapiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x41\x6f\xd3\x4c\x10\xbd\xe7\x57\xac\xf6\xfb\x8e\xb1\x4b\x38\xa1\xdc\x10\x07\x0e\x55\xa5\x4a\xe5\x86\x7a\x98\x38\x63\x67\x88\xb3\xbb\xcc\x4e\x0c\x01\xe5\xbf\x23\x6f\x6d\xc7\x9b\xd8\x14\xa2\x46\x94\x72\xb3\xd6\x33\x6f\x76\xe6\xbd\x79\xb2\xbf\x4f\x94\xd2\x4b\xcc\xc9\x90\x90\x35\x5e\xcf\x55\x7d\xa4\x94\x26\x9b\xae\xdf\xf8\x14\x1c\xa5\xe0\x9c\x4f\xab\x59\xfa\xce\x9a\x9c\x8a\x1b\x70\x6f\xb9\x38\x44\x2a\xa5\x1d\x5b\x87\x2c\x84\xfd\x53\xa5\xf4\x7b\x34\xc8\x20\x96\x8f\x12\xc2\xcb\xff\x19\x73\x3d\x57\xfa\xbf\xab\x5e\xfd\xab\x81\xb2\x31\x4a\x07\xb1\x6f\x9e\xf6\xd3\xf6\x1a\xb0\x5c\x06\x14\x28\x6f\xfb\x17\xca\xa1\xf4\xd8\x05\xc9\xce\x61\x5d\xd6\x2e\x3e\x61\x26\xba\x3b\xff\x9a\xac\xb7\x0b\x64\x83\x82\x3e\x29\xd8\x6e\x5d\x52\x21\x7b\xb2\x26\x59\x93\x59\xea\xb9\xfa\xd8\x95\x8e\xfa\x08\xb1\x35\xe2\x7a\xeb\xc5\x6e\xe8\x1b\xa6\x59\x18\x54\x68\x84\x6c\x57\x22\x44\x37\x58\x3a\x9e\x65\x14\xd2\x94\xad\xa3\xaa\xd9\x02\x05\x66\xa7\x4d\xdf\x4f\x7a\xad\x0f\x71\x75\x87\x19\xa3\x3c\x0f\xa2\x0e\xdd\xb5\xd3\x8f\xf0\x5b\x46\xbc\x30\x99\xe2\xa5\x10\xdc\x23\xe0\xe9\xd9\x1d\xe3\x6b\x94\x60\x03\x1b\xf4\x0e\xb2\x5f\x1f\xfe\x34\x4e\x3e\x27\x6f\x81\x2b\xa8\xc8\xf2\x39\xb9\xd7\xd5\x2d\x10\xdf\xd9\x2d\x67\x78\xbe\x22\x63\x94\x17\xa2\xac\x98\xfc\xa7\x17\xd7\x75\x73\x19\x90\x07\xa8\x4e\x5c\x8c\x9f\xb7\xc4\x18\x37\xa4\x3f\xec\x1c\xde\xa0\x40\x5b\xe9\x7e\xfa\x98\x18\xb3\xd6\xfb\xba\x4e\x8e\x09\x26\xc1\xcd\x31\xeb\xbf\xc3\x7b\xec\xae\x3d\x90\xfd\x74\x48\x88\xc0\x0c\xbb\x78\x92\x11\xa7\x0e\x24\x5b\x25\x1b\xe4\x02\x93\x35\xee\xea\x94\xb0\x13\x8f\x65\x78\x61\x10\x2c\x42\x42\xc8\x1e\xd6\xba\x0f\x56\x71\xb1\x61\xf4\x9c\xe8\x59\x4e\xe2\xaf\x5e\xc6\x78\x59\x2e\xb0\x8c\x23\x3e\x38\xba\x5c\x25\x09\x32\x94\x27\x9e\x39\xa2\xa2\x31\x2f\xfe\xb9\x40\x06\x65\x9c\x53\x79\x6a\xd5\x97\x2f\x8b\xa6\xfa\x33\x55\xff\x8d\xef\x98\x58\x80\xe7\x0a\x7c\xd2\xb4\xaf\xc9\xe4\xf6\xf0\x93\x21\x24\x25\x8e\xad\xd1\x08\xfe\x03\x8e\xff\x02\x45\x81\xb5\x57\xea\xd7\xe9\xab\x90\xa1\x1d\xc8\x2a\xb0\xbe\x9f\xec\x7f\x04\x00\x00\xff\xff\x60\xef\x30\x23\xd9\x0c\x00\x00")

func kustomizationapiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_kustomizationapiSwaggerJson,
		"kustomizationapi/swagger.json",
	)
}

func kustomizationapiSwaggerJson() (*asset, error) {
	bytes, err := kustomizationapiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kustomizationapi/swagger.json", size: 3289, mode: os.FileMode(420), modTime: time.Unix(1643411805, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kustomizationapi/swagger.json": kustomizationapiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kustomizationapi": &bintree{nil, map[string]*bintree{
		"swagger.json": &bintree{kustomizationapiSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}